á(
`C:\code\c-sharp\src\github.com\DOS1986\ECTracker\ECTracker.Shared\Implementations\AppSettings.cs
	namespace 	
	ECTracker
 
. 
Shared 
. 
Implementations *
{		 
public

 

abstract

 
class

 
AppSettings

 %
:

& '
IAppSettings

( 4
{ 
private 
const 
string 
FileName %
=& '
$str( 7
;7 8
public 
void 
Load 
( 
object 
tar  #
)# $
{ 	

Dictionary 
< 
string 
, 
object %
>% &
items' ,
;, -
var 
type 
= 
tar 
. 
GetType "
(" #
)# $
;$ %
try 
{ 
var 
storage 
= 
IsolatedStorageFile 1
.1 2#
GetUserStoreForAssembly2 I
(I J
)J K
;K L
using %
IsolatedStorageFileStream /
stream0 6
=7 8
new9 <%
IsolatedStorageFileStream= V
(V W
FileNameW _
,_ `
FileModea i
.i j
Openj n
,n o
storagep w
)w x
;x y
using 
StreamReader "
reader# )
=* +
new, /
StreamReader0 <
(< =
stream= C
)C D
;D E
items 
= 
JsonConvert #
.# $
DeserializeObject$ 5
<5 6

Dictionary6 @
<@ A
stringA G
,G H
objectI O
>O P
>P Q
(Q R
readerR X
.X Y
	ReadToEndY b
(b c
)c d
)d e
;e f
} 
catch 
( 
	Exception 
) 
{ 
return  &
;& '
}( )
if 
( 
items 
== 
null 
) 
{  
return! '
;' (
}) *
foreach 
( 
var 
( 
key 
, 
value $
)$ %
in& (
items) .
). /
{ 
type   
.   
GetProperty    
(    !
key  ! $
)  $ %
?  % &
.  & '
SetValue  ' /
(  / 0
tar  0 3
,  3 4
value  5 :
,  : ;
null  < @
)  @ A
;  A B
}!! 
}"" 	
public$$ 
void$$ 
Save$$ 
($$ 
object$$ 
src$$  #
,$$# $
string$$% +
tar$$, /
)$$/ 0
{%% 	
var&& 
items&& 
=&& 
new&& 

Dictionary&& &
<&&& '
string&&' -
,&&- .
object&&/ 5
>&&5 6
(&&6 7
)&&7 8
;&&8 9
var'' 
type'' 
='' 
src'' 
.'' 
GetType'' "
(''" #
)''# $
;''$ %
var)) 
	paramList)) 
=)) 
tar)) 
.))  
Split))  %
())% &
new))& )
char))* .
[)). /
]))/ 0
{))1 2
$char))3 6
}))7 8
)))8 9
;))9 :
foreach** 
(** 
var** 
	paramName** "
in**# %
	paramList**& /
)**/ 0
{++ 
items,, 
.,, 
Add,, 
(,, 
	paramName,, #
,,,# $
type,,% )
.,,) *
GetProperty,,* 5
(,,5 6
	paramName,,6 ?
.,,? @
Trim,,@ D
(,,D E
),,E F
),,F G
?,,G H
.,,H I
GetValue,,I Q
(,,Q R
src,,R U
,,,U V
null,,W [
),,[ \
),,\ ]
;,,] ^
var-- 
storage-- 
=-- 
IsolatedStorageFile-- 1
.--1 2#
GetUserStoreForAssembly--2 I
(--I J
)--J K
;--K L
using.. 
var.. 
stream..  
=..! "
new..# &%
IsolatedStorageFileStream..' @
(..@ A
FileName..A I
,..I J
FileMode..K S
...S T
Create..T Z
,..Z [
storage..\ c
)..c d
;..d e
using// 
var// 
writer//  
=//! "
new//# &
StreamWriter//' 3
(//3 4
stream//4 :
)//: ;
;//; <
writer00 
.00 
Write00 
(00 
JsonConvert00 (
.00( )
SerializeObject00) 8
(008 9
items009 >
)00> ?
)00? @
;00@ A
}11 
}22 	
}33 
}44 ·
[C:\code\c-sharp\src\github.com\DOS1986\ECTracker\ECTracker.Shared\Implementations\Export.cs
	namespace 	
	ECTracker
 
. 
Shared 
. 
Implementations *
{ 
class 	
Export
 
{ 
}		 
}

 ·
[C:\code\c-sharp\src\github.com\DOS1986\ECTracker\ECTracker.Shared\Implementations\Import.cs
	namespace 	
	ECTracker
 
. 
Shared 
. 
Implementations *
{ 
class 	
Import
 
{ 
}		 
}

 ™
\C:\code\c-sharp\src\github.com\DOS1986\ECTracker\ECTracker.Shared\Interfaces\IAppSettings.cs
	namespace 	
	ECTracker
 
. 
Shared 
. 

Interfaces %
{ 
public 

	interface 
IAppSettings !
{ 
public 
void 
Save 
( 
object 
src  #
,# $
string% +
tar, /
)/ 0
;0 1
public 
void 
Load 
( 
object 
tar  #
)# $
;$ %
} 
} æ
TC:\code\c-sharp\src\github.com\DOS1986\ECTracker\ECTracker.Shared\Models\Settings.cs
	namespace 	
	ECTracker
 
. 
Shared 
. 
Models !
{ 
public 

class 
Settings 
{ 
public 
string 
ConnectionString &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
DatabaseType 
Database $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
string 
DatabaseName "
{# $
get% (
;( )
set* -
;- .
}/ 0
} 
public

 

enum

 
DatabaseType

 
{ 
SqLite 
, 
MsSql 
, 
MySql 
, 
Oracle 
, 

Postgresql 
, 
NoSql 
, 
Json 
} 
} 